/* CS 385 - Semester Project

   Authors:
   Robert Rotaru
   Bryan Bigelow
   Anthony Cerritelli

   Content:
   16-bit MIPS ALU in Verilog
*/

module mux2bit2x1(A,B,select,OUT);
	input [1:0] A,B;
    input select;
	output [1:0] OUT;

    mux2x1 mux1(A[0], B[0], select, OUT[0]),
           mux2(A[1], B[1], select, OUT[1]);
endmodule

module mux16bit2x1(A, B, select, OUT);
	input [15:0] A,B;
    input select;
	output [15:0] OUT;

    mux2x1 mux1(A[0], B[0], select, OUT[0]),
           mux2(A[1], B[1], select, OUT[1]),
           mux3(A[2], B[2], select, OUT[2]),
           mux4(A[3], B[3], select, OUT[3]),
           mux5(A[4], B[4], select, OUT[4]),
           mux6(A[5], B[5], select, OUT[5]),
           mux7(A[6], B[6], select, OUT[6]),
           mux8(A[7], B[7], select, OUT[7]),
           mux9(A[8], B[8], select, OUT[8]),
           mux10(A[9], B[9], select, OUT[9]),
           mux11(A[10], B[10], select, OUT[10]),
           mux12(A[11], B[11], select, OUT[11]),
           mux13(A[12], B[12], select, OUT[12]),
           mux14(A[13], B[13], select, OUT[13]),
           mux15(A[14], B[14], select, OUT[14]),
           mux16(A[15], B[15], select, OUT[15]);
endmodule

module mainCtrl (op, ctrl);
    input [2:0] op;
    output reg [5:0] ctrl;

    always @(op) case (op)
        3'b000: ctrl <= 6'b101000; // AND
        3'b001: ctrl <= 6'b101001; // OR 
        3'b010: ctrl <= 6'b101010; // ADD
        3'b100: ctrl <= 6'b011010; // ADDI *note, this may be 3'b100 instead of 3'b010
        3'b110: ctrl <= 6'b101110; // SUB
        3'b111: ctrl <= 6'b101111; // SLT
    endcase

endmodule

module aluCtrl (aluOp, func, aluCtrl);

    input [1:0] aluOp;
    input [5:0] func;
    output reg [2:0] aluCtrl;

    

endmodule

module CPU (clock, AluOut, IR, test,a,b,c,d);

    output [2:0] test;
    output [15:0] a,b,c,d;
    
    input clock;
    output [15:0] AluOut, IR;
    reg[15:0] PC;
    reg[15:0] IMemory[0:511];
    wire [15:0] IR, NextPC, A, B, AluOut, RD2, SignExtend;
    wire [2:0] AluCtrl;
    wire [1:0] WR;

    /* Test Program */
    initial begin 
        IMemory[0] = 16'b0100000100001111;  // addi $t1, $0,  15   ($t1=15)   0010 00 01 00001111
        IMemory[1] = 16'b0100001000000111;  // addi $t2, $0,  7    ($t2= 7)
        IMemory[2] = 16'b0000011011000000;  // and  $t3, $t1, $t2  ($t3= 7)
        IMemory[3] = 16'b0110011110000000;  // sub  $t2, $t1, $t3  ($t2= 8)
        IMemory[4] = 16'b0001101110000000;  // or   $t2, $t2, $t3  ($t2=15)
        IMemory[5] = 16'b0010101111000000;  // add  $t3, $t2, $t3  ($t3=22)   0010 10 11 11 xxxxxx
        IMemory[6] = 16'b0111111001000000;  // slt  $t1, $t3, $t2  ($t1= 1)
        IMemory[7] = 16'b0111101101000000;  // slt  $t1, $t2, $t3  ($t1= 0)
    end

    initial PC = 0;

    assign IR = IMemory[PC>>2];
    // assign WR
    mux2bit2x1 muxWR (IR[7:6], IR[9:8], RegDst, WR);
    // assign B
    mux16bit2x1 muxB (RD2, SignExtend, AluSrc, B);

    assign SignExtend = {{8{IR[7]}},IR[7:0]};

    reg_file rf (IR[11:10], IR[9:8], WR, AluOut, RegWrite, A, RD2, clock);

    ALU fetch (3'b010, PC, 16'b10, NextPC, Unused);

    ALU exec (AluCtrl, A, B, AluOut, Zero);

    mainCtrl main (IR[14:12], {RegDst, AluSrc, RegWrite, AluCtrl});

    // These are for debugging purposes
    assign test = AluCtrl;
    assign a = IR[11:10];
    assign b = IR[9:8];
    assign c = WR;
    assign d = AluOut;

    always @(negedge clock) begin
        PC <= NextPC;
    end
endmodule

module test();
  reg clock;
  wire [15:0] WD,IR;
  wire [2:0] test;
  wire [15:0] a,b,c,d;

  CPU test_cpu(clock,WD,IR, test, a,b,c,d);

  always #1 clock = ~clock;
  
  initial begin
    $display ("time clock IR               WD");
    //$monitor ("%2d   %b     %b %b %b %b %b %b %b", $time,clock,test,a,b,c,d,IR,WD);
    $monitor ("%2d   %b     %b %b", $time,clock,IR,WD);
    clock = 1;
    #24 $finish;
  end
endmodule

/* Compiling and simulation

Source Files\$ iverilog -o mips-cpu MIPS-CPU.vl ALU16.vl 16mux.v regfile16.v
Source FIles\$ vvp mips-cpu
time clock IR       WD
 0   1     2009000f 0000000f
 1   0     200a0007 00000007
 2   1     200a0007 00000007
 3   0     012a5824 00000007
 4   1     012a5824 00000007
 5   0     012b5022 00000008
 6   1     012b5022 00000008
 7   0     014b5025 0000000f
 8   1     014b5025 0000000f
 9   0     016a482a 00000001
10   1     016a482a 00000001
11   0     014b482a 00000000
12   1     014b482a 00000000

*/
